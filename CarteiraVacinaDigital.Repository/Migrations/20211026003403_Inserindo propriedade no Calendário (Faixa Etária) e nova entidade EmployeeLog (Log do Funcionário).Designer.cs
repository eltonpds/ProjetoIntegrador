// <auto-generated />
using System;
using CarteiraVacinaDigital.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarteiraVacinaDigital.Repository.Migrations
{
    [DbContext(typeof(CarteiraVacinaDigitalContext))]
    [Migration("20211026003403_Inserindo propriedade no Calendário (Faixa Etária) e nova entidade EmployeeLog (Log do Funcionário)")]
    partial class InserindopropriedadenoCalendárioFaixaEtáriaenovaentidadeEmployeeLogLogdoFuncionário
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Calender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgeGroup")
                        .IsRequired();

                    b.Property<string>("Information")
                        .IsRequired();

                    b.Property<int>("VaccineId");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId")
                        .IsUnique();

                    b.ToTable("Calenders");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CampaignName")
                        .IsRequired();

                    b.Property<string>("Information")
                        .IsRequired();

                    b.Property<int>("VaccineId");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId")
                        .IsUnique();

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("Cep");

                    b.Property<string>("City");

                    b.Property<string>("Coren")
                        .IsRequired();

                    b.Property<string>("Cpf")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int?>("LogId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Office");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.EmployeeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Action");

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("Information");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("EmployeeLogs");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.HealthPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("HealthUnit")
                        .IsRequired();

                    b.Property<int>("LogsID");

                    b.Property<string>("SanitaryDistrict")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LogsID");

                    b.ToTable("HealthPosts");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdEmployee");

                    b.Property<int>("IdHealthPost");

                    b.Property<int>("IdPacient");

                    b.Property<int>("IdVaccine");

                    b.Property<DateTime>("VaccineDate");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Pacient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("CartaoSus");

                    b.Property<string>("Cep");

                    b.Property<string>("City");

                    b.Property<string>("Cpf");

                    b.Property<string>("Email");

                    b.Property<string>("FatherName");

                    b.Property<int?>("LogId");

                    b.Property<string>("MotherName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int?>("ResponsibleId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.HasIndex("ResponsibleId");

                    b.ToTable("Pacients");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Responsible", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChildrenID");

                    b.Property<int>("ResponsibleID");

                    b.HasKey("Id");

                    b.ToTable("Responsibles");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CalenderId");

                    b.Property<string>("FactoryName");

                    b.Property<int?>("LogsId");

                    b.Property<string>("Lote");

                    b.Property<DateTime>("ManufacturingDate");

                    b.Property<string>("VaccineName");

                    b.Property<DateTime>("Validate");

                    b.HasKey("Id");

                    b.HasIndex("CalenderId");

                    b.HasIndex("LogsId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.VaccineHealthPost", b =>
                {
                    b.Property<int>("VaccineID");

                    b.Property<int>("HealthPostID");

                    b.HasKey("VaccineID", "HealthPostID");

                    b.HasIndex("HealthPostID");

                    b.ToTable("VaccineHealthPosts");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Calender", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Vaccine", "Vaccine")
                        .WithOne()
                        .HasForeignKey("CarteiraVacinaDigital.Model.Entities.Calender", "VaccineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Campaign", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Vaccine", "Vaccine")
                        .WithOne("Campaign")
                        .HasForeignKey("CarteiraVacinaDigital.Model.Entities.Campaign", "VaccineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Employee", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Log")
                        .WithMany("Employees")
                        .HasForeignKey("LogId");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.EmployeeLog", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Employee", "Employee")
                        .WithOne("EmployeeLog")
                        .HasForeignKey("CarteiraVacinaDigital.Model.Entities.EmployeeLog", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.HealthPost", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Log", "Logs")
                        .WithMany("HealthPosts")
                        .HasForeignKey("LogsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Pacient", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Log")
                        .WithMany("Pacients")
                        .HasForeignKey("LogId");

                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Responsible")
                        .WithMany("Pacients")
                        .HasForeignKey("ResponsibleId");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.Vaccine", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Calender", "Calender")
                        .WithMany()
                        .HasForeignKey("CalenderId");

                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Log", "Logs")
                        .WithMany("Vaccines")
                        .HasForeignKey("LogsId");
                });

            modelBuilder.Entity("CarteiraVacinaDigital.Model.Entities.VaccineHealthPost", b =>
                {
                    b.HasOne("CarteiraVacinaDigital.Model.Entities.HealthPost", "HealthPost")
                        .WithMany("VaccineHealthPosts")
                        .HasForeignKey("HealthPostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarteiraVacinaDigital.Model.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineHealthPosts")
                        .HasForeignKey("VaccineID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
